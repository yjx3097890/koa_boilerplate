{
  "_args": [
    [
      "pg-escape@github:tmiguelt/pg-escape",
      "/Users/yanjixian/CODE/koa_boilerplate/node_modules/koa-pg-session"
    ]
  ],
  "_from": "tmiguelt/pg-escape",
  "_id": "pg-escape@0.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/pg-escape",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/tmiguelt/pg-escape/master/package.json",
      "gitUrl": "git://github.com/tmiguelt/pg-escape.git",
      "httpsUrl": "git+https://github.com/tmiguelt/pg-escape.git",
      "shortcut": "github:tmiguelt/pg-escape",
      "ssh": "git@github.com:tmiguelt/pg-escape.git",
      "sshUrl": "git+ssh://git@github.com/tmiguelt/pg-escape.git",
      "type": "github"
    },
    "name": "pg-escape",
    "raw": "pg-escape@github:tmiguelt/pg-escape",
    "rawSpec": "github:tmiguelt/pg-escape",
    "scope": null,
    "spec": "github:tmiguelt/pg-escape",
    "type": "hosted"
  },
  "_requiredBy": [
    "/koa-pg-session"
  ],
  "_resolved": "git://github.com/tmiguelt/pg-escape.git#599206dea0cf283464e85b32669f44ac21d6d551",
  "_shasum": "d8ed3cfb73ad40621252aa293b56907ba8807506",
  "_shrinkwrap": null,
  "_spec": "pg-escape@github:tmiguelt/pg-escape",
  "_where": "/Users/yanjixian/CODE/koa_boilerplate/node_modules/koa-pg-session",
  "bugs": {
    "url": "https://github.com/segmentio/pg-escape/issues"
  },
  "dependencies": {},
  "description": "escape postgres queries which do not support stored procedures",
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "gitHead": "599206dea0cf283464e85b32669f44ac21d6d551",
  "homepage": "https://github.com/segmentio/pg-escape#readme",
  "keywords": [
    "pg",
    "postgres",
    "escape",
    "query"
  ],
  "license": "MIT",
  "name": "pg-escape",
  "optionalDependencies": {},
  "readme": "\n# pg-escape\n\n  Sprintf-style postgres query formatting and escape helper functions.\n\n## Installation\n\n```\n$ npm install pg-escape\n```\n\n## Example\n\n```js\nvar sql = escape('INSERT INTO %I VALUES(%L)', 'books', \"O'Reilly\");\nconsole.log(sql);\n```\n\nyields:\n\n```\nINSERT INTO books VALUES('O''Reilly')\n```\n\n## API\n\n### escape(fmt, ...)\n\n Format the given arguments.\n\n### escape.string(val)\n\n  Format as a simple string.\n\n### escape.dollarQuotedString(val)\n\n  Format as a [dollar quoted string](http://www.postgresql.org/docs/8.3/interactive/sql-syntax-lexical.html#SQL-SYNTAX-DOLLAR-QUOTING)\n\n### escape.ident(val)\n\n  Format as an identifier.\n\n### escape.literal(val)\n\n  Format as a literal.\n\n## Formats\n\n- `%s` formats the argument value as a simple string. A null value is treated as an empty string.\n- `%Q` formats the argument value as a [dollar quoted string](http://www.postgresql.org/docs/8.3/interactive/sql-syntax-lexical.html#SQL-SYNTAX-DOLLAR-QUOTING). A null value is treated as an empty string.\n- `%I` treats the argument value as an SQL identifier, double-quoting it if necessary. It is an error for the value to be null.\n- `%L` quotes the argument value as an SQL literal. A null value is displayed as the string NULL, without quotes.\n- `%%` In addition to the format specifiers described above, the special sequence %% may be used to output a literal % character.\n\n# License\n\n  MIT",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/segmentio/pg-escape.git"
  },
  "scripts": {
    "test": "mocha --require should --reporter spec"
  },
  "version": "0.1.0"
}
